apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {
  compileSdkVersion 23
  buildToolsVersion "23"

  lintOptions {
    abortOnError false
  }

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 23
    versionCode 1
    versionName "1.0"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildTypes {}
}

def support_version = "23.2.1"

dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')

  compile "com.android.support:appcompat-v7:${support_version}"
  compile "com.android.support:design:${support_version}"

  compile "com.android.support:cardview-v7:${support_version}"
  compile "com.android.support:recyclerview-v7:${support_version}"

  compile 'com.jakewharton:butterknife:8.3.0'
  compile 'com.afollestad:material-dialogs:0.7.3.4'
  compile 'com.squareup.okhttp:okhttp:2.5.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.google.code.gson:gson:2.3.1'

  compile 'io.reactivex:rxandroid:1.0.1'
  // Because RxAndroid releases are few and far between, it is recommended you also
  // explicitly depend on RxJava's latest version for bug fixes and new features.
  compile 'io.reactivex:rxjava:1.0.14'
  compile 'io.reactivex:rxjava-math:1.0.0'
  compile 'com.jakewharton.rxbinding:rxbinding:0.2.0'

  apt "com.jakewharton:butterknife-compiler:8.3.0"

}

preBuild.doFirst {
  println 'doFirst'
}

import com.android.build.gradle.api.ApkVariant

project.afterEvaluate {
  project.android.applicationVariants.all { ApkVariant variant ->
    println 'variant name: ' + variant.dirName

    println 'task name: ' + "zipalign${variant.name.capitalize()}"
    Task task = project.tasks.findByName("zipalign${variant.name.capitalize()}")
    println 'task: ' + task
    if (task) {
      task.doLast {
        println 'task: ' + task.name
        println 'task output: ' + task.outputs
        println 'output size: ' + task.outputs.files.size()
        task.outputs.files.files.each { File f ->
          println 'output file: ' + f.absolutePath
          String branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
          int index = f.absolutePath.lastIndexOf('/')
          println 'new name: ' +"${f.absolutePath.substring(0, index)}/${branchName}.apk"
          f.renameTo("${f.absolutePath.substring(0, index)}/${branchName}.apk")
        }
        println 'zipalign doLast'
      }
    }
  }
}

task cleanA << {
  clean.execute()
}

task foo << {
  println 'app doLast'
}
